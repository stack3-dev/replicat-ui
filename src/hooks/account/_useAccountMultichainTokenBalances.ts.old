import { getAlchemyName, getChainBidFromAlchemyName } from '@/utils/chains';
import { useQuery } from '@tanstack/react-query';
import { Hex, hexToBigInt } from 'viem';

interface AlchemyFTBalance {
  address: Hex;
  network: string;
  tokenAddress: string;
  tokenBalance: Hex;
}

interface AlchemyFTBalancesResponse {
  data: {
    tokens: AlchemyFTBalance[];
  };
}

export interface AccountBalance {
  address: string;
  chainBid: number;
  tokenBalance: bigint;
  tokenAddress: string;
}

export const useAccountMultichainTokenBalances = ({
  chainBids,
  address,
  enabled = true,
}: {
  chainBids: number[];
  address: string;
  enabled: boolean;
}) => {
  const options = {
    method: 'POST',
    headers: { accept: 'application/json', 'content-type': 'application/json' },
    body: JSON.stringify({
      addresses: [
        {
          address: address,
          networks: chainBids.map((chainBid) => getAlchemyName(chainBid)),
        },
      ],
    }),
  };

  return useQuery({
    queryKey: ['account-balances', address, { chainBids }],
    queryFn: async (): Promise<Array<AccountBalance>> => {
      const response = await fetch(
        'https://api.g.alchemy.com/data/v1/docs-demo/assets/tokens/balances/by-address',
        options
      );
      const content: AlchemyFTBalancesResponse = await response.json();

      const result: Array<AccountBalance> = content.data.tokens.map(
        (token) => ({
          address: token.address,
          chainBid: getChainBidFromAlchemyName(token.network),
          tokenBalance: hexToBigInt(token.tokenBalance),
          tokenAddress: token.tokenAddress,
        })
      );

      return result;
    },
    enabled,
  });
};
